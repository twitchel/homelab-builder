locals {
  {{ inventory_hostname_short }}_existing_vm_index = try (
    index(data.proxmox_virtual_environment_vms.homelab-builder-vms.vms.*.name, "{{ inventory_hostname_short }}"),
    ""
  )
  {{ inventory_hostname_short }}_node_name = local.{{ inventory_hostname_short }}_existing_vm_index != "" ? data.proxmox_virtual_environment_vms.homelab-builder-vms.vms[local.{{ inventory_hostname_short }}_existing_vm_index].node_name : "{{ proxmox_node }}"
}

resource "proxmox_virtual_environment_vm" "{{ inventory_hostname_short }}" {
  vm_id           = {{ vm_id }}
  name            = "{{ inventory_hostname_short }}"
  node_name       = local.{{ inventory_hostname_short }}_node_name
  description     = "Managed by Terraform/Homelab Builder"
  tags            = ["homelab-builder", "{{ environment_name }}"]
  stop_on_destroy = true

  machine = "pc"

  cpu {
    cores = var.node_cpu_cores
    type  = "host"
  }

  memory {
    dedicated = var.node_memory_mb
  }

  network_device {
    bridge      = "vmbr0"
    mac_address = "{{ mac }}"
  }

  disk {
    datastore_id = "{{ proxmox_storage }}"
    file_id      = proxmox_virtual_environment_download_file.ubuntu_cloud_image-{{ proxmox_node }}.id
    interface    = "scsi0"
    size         = var.node_disk0_size
  }

  disk {
    datastore_id = "{{ proxmox_storage }}"
    size         = var.node_disk1_size
    file_format  = "raw"
    interface    = "scsi1"
  }

  initialization {
    datastore_id = "{{ proxmox_storage }}"
    interface    = "ide2"

    user_account {
      username = var.node_ssh_user
      keys = [trimspace(data.local_file.ssh_public_key.content)]
    }

    ip_config {
      ipv4 {
        address = "{{ ansible_host }}/24"
        gateway = var.node_network_gateway
      }
    }
  }
}
