- name: Provision Terraform config
  delegate_to: localhost
  block:
    - name: Provision terraform files for templates
      when: "inventory_hostname in groups['proxmox_servers']"
      template:
        src: template.tf.j2
        dest: "{{ terraform_dir }}/{{ inventory_hostname_short }}.tf"

    - name: Run terraform init
      command: terraform init -upgrade
      run_once: true
      args:
        chdir: "{{ terraform_dir }}"

    - name: Run terraform plan
      command: terraform plan
      run_once: true
      args:
        chdir: "{{ terraform_dir }}"

    - name: Run terraform apply
      command: terraform apply -auto-approve
      run_once: true
      args:
        chdir: "{{ terraform_dir }}"


#    - name: Does our VM template exist already?
#      shell: qm list | grep -q homelab-builder-{{ inventory_hostname }}
#      register: _proxmox_vm_template_exists
#      failed_when: _proxmox_vm_template_exists.rc not in [0,1]
#      when: "inventory_hostname in groups['proxmox_servers']"
#
#    # Create template on proxmox node if not exist
#    - name: Create proxmox VM template if it doesn't already exist
#      when:
#        - _proxmox_vm_template_exists.rc == 1
#        - "inventory_hostname in groups['proxmox_servers']"
#      block:
#        - name: "[create template] Download latest ubuntu cloud-init image"
#          get_url:
#            url: https://cloud-images.ubuntu.com/{{ proxmox_vm_ubuntu_version }}/current/{{ proxmox_vm_ubuntu_version }}-server-cloudimg-amd64.img
#            dest: /tmp/
#
#        - name: "[create template] Create new VM"
#          command: qm create {{ template_vm_id | quote}} --name homelab-builder-{{ inventory_hostname }} --memory {{ proxmox_vm_ram }} --net0 virtio,bridge={{ proxmox_vm_network_bridge }}
#          when: proxmox_vm_vlan_tag is not defined
#
#        - name: "[create template] Import cloud-init image into disk"
#          command: qm importdisk {{ template_vm_id | quote}} /tmp/focal-server-cloudimg-amd64.img {{ proxmox_storage }}
#
#        - name: "[create template] Attach disk to template VM"
#          command: qm set {{ template_vm_id | quote}} --scsihw virtio-scsi-pci --scsi0 {{ proxmox_storage }}:vm-{{ template_vm_id | quote}}-disk-0
#
#        - name: "[create template] Create CDROM image to pass cloud-init params to template VM"
#          command: qm set {{ template_vm_id | quote}} --ide2 {{ proxmox_storage }}:cloudinit
#
#        - name: "[create template] Set template VM to boot from hard disk only (speeds up boot)"
#          command: qm set {{ template_vm_id | quote}} --boot c --bootdisk scsi0
#
#        - name: "[create template] Add a serial console to the template for good measure"
#          command: qm set {{ template_vm_id | quote}} --serial0 socket --vga serial0
#
#        - name: "[create template] Turn VM into template"
#          command: qm template {{ template_vm_id | quote}}
#
#    - name: Print return information from the previous task
#      ansible.builtin.debug:
#        var: proxmox_vm_ubuntu_version
#        verbosity: 0