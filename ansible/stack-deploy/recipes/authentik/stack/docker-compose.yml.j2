version: "3.8"

networks:
  cloud-public:
    external: true
  authentik:
    external: true

services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - {{ distributed_storage_root }}/appdata/authentik/database:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 1
    env_file:
      - {{ distributed_storage_root }}/stack/authentik/.env
    networks:
      - authentik
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    deploy:
      mode: replicated
      replicas: 1
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - {{ distributed_storage_root }}/appdata/authentik/redis:/data
    networks:
      - authentik
  server:
    image: ghcr.io/goauthentik/server:2024.12.1
    command: server
    volumes:
      - {{ distributed_storage_root }}/appdata/authentik/media:/media
      - {{ distributed_storage_root }}/appdata/authentik/custom-templates:/templates
    env_file: {{ distributed_storage_root }}/stack/authentik/.env
    ports:
      - "9000:9000"
      - "9443:9443"
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.swarm.network=cloud-public"
        # HTTP Routers
        - "traefik.http.routers.authentik-rtr.entrypoints=websecure"
        - "traefik.http.routers.authentik-rtr.rule=Host(`authentik.$DOMAIN_NAME`)"
        # HTTP Services
        - "traefik.http.routers.authentik-rtr.service=authentik-svc"
        - "traefik.http.services.authentik-svc.loadbalancer.server.port=9000"

        ## Individual Application forwardAuth regex (catch any subdomain using individual application forwardAuth)
        - "traefik.http.routers.authentik-output-rtr.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.$$DOMAIN_NAME`) && PathPrefix(`/outpost.goauthentik.io/`)"
    networks:
      - cloud-public
      - authentik
  worker:
    image: ghcr.io/goauthentik/server:2024.12.1
    command: worker
    env_file: {{ distributed_storage_root }}/stack/authentik/.env
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ distributed_storage_root }}/appdata/authentik/media:/media
      - {{ distributed_storage_root }}/appdata/authentik/certs:/certs
      - {{ distributed_storage_root }}/appdata/authentik/custom-templates:/templates
    networks:
      - cloud-public
      - authentik