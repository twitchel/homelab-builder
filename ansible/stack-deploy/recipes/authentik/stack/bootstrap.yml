- name: Create authentik network
  docker_network:
    name: authentik
    scope: swarm
    driver: overlay
    attachable: yes

- name: "{{ recipe }} --> ensure directories exist"
  block:

  - name: "{{ recipe }} --> ensure  /var/data/appdata/authentik/redis exists"
    file:
      path: "/var/data/appdata/authentik/redis"
      state: directory

  - name: "{{ recipe }} --> ensure  /var/data/appdata/authentik/database exists"
    file:
      path: "/var/data/appdata/authentik/database"
      state: directory

  - name: "{{ recipe }} --> ensure  /var/data/appdata/authentik/media exists"
    file:
      path: "/var/data/appdata/authentik/media"
      state: directory

  - name: "{{ recipe }} --> ensure  /var/data/appdata/authentik/media/public/icons exists"
    file:
      path: "/var/data/appdata/authentik/media/public/icons"
      state: directory

  - name: "{{ recipe }} --> ensure  /var/data/appdata/authentik/custom-templates exists"
    file:
      path: "/var/data/appdata/authentik/custom-templates"
      state: directory

  - name: "{{ recipe }} --> ensure  /var/data/appdata/authentik/certs exists"
    file:
      path: "/var/data/appdata/authentik/certs"
      state: directory

  - name: "{{ recipe }} --> ensure /var/data/stack/authentik/secrets exists"
    file:
      path: "/var/data/stack/authentik/secrets"
      state: directory

- name: "{{ recipe }} --> write env secrets"
  block:
  - name: "{{ recipe }} --> generate authentik postgres password"
    shell: "openssl rand -base64 36 | tr -d '\n' > /var/data/stack/authentik/secrets/postgres_password"
    args:
      creates: /var/data/stack/authentik/secrets/postgres_password

  - command: cat /var/data/stack/authentik/secrets/postgres_password
    register: authentik_postgres_password
    become: true

  - name: "{{ recipe }} -> set POSTGRES_PASSWORD env"
    lineinfile:
      path: "/var/data/stack/authentik/.env"
      regexp: "^POSTGRES_PASSWORD="
      line: "POSTGRES_PASSWORD={{ authentik_postgres_password.stdout }}"

  - name: "{{ recipe }} -> set AUTHENTIK_POSTGRESQL__PASSWORD env"
    lineinfile:
      path: "/var/data/stack/authentik/.env"
      regexp: "^AUTHENTIK_POSTGRESQL__PASSWORD="
      line: "AUTHENTIK_POSTGRESQL__PASSWORD={{ authentik_postgres_password.stdout }}"

  - name: "{{ recipe }} --> generate authentik secret key"
    shell: "openssl rand -base64 60 | tr -d '\n' > /var/data/stack/authentik/secrets/authentik_secret_key"
    args:
      creates: /var/data/stack/authentik/secrets/authentik_secret_key

  - command: cat /var/data/stack/authentik/secrets/authentik_secret_key
    register: authentik_secret
    become: true

  - name: "{{ recipe }} -> set AUTHENTIK_SECRET_KEY env"
    lineinfile:
      path: "/var/data/stack/authentik/.env"
      regexp: "^AUTHENTIK_SECRET_KEY="
      line: "AUTHENTIK_SECRET_KEY={{ authentik_secret.stdout }}"

  - name: "{{ recipe }} --> generate authentik API token"
    shell: "openssl rand -base64 36 | tr -d '\n' > /var/data/stack/authentik/secrets/authentik_bootstrap_token"
    args:
      creates: /var/data/stack/authentik/secrets/authentik_bootstrap_token

  - command: cat /var/data/stack/authentik/secrets/authentik_bootstrap_token
    register: authentik_bootstrap_token

  - name: "{{ recipe }} -> set AUTHENTIK_BOOTSTRAP_TOKEN env"
    lineinfile:
      path: "/var/data/stack/authentik/.env"
      regexp: "^AUTHENTIK_BOOTSTRAP_TOKEN="
      line: "AUTHENTIK_BOOTSTRAP_TOKEN={{ authentik_bootstrap_token.stdout }}"
