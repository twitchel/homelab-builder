## add-authentik-auth.yml
#
# This task set adds an application to authentik automatically. It is defined as a single auth application and has a
# name + icon associated to it
#
# input:
#   name_prefix: string
#   authentik_base_url: string
#   authentik_token: string
#   app:
#     name: string
#     slug: string
#     domain: string
#     icon: string

- set_fact:
    name_prefix: "{{ recipe }} --> Add Authentik Auth"

- command: cat {{ distributed_storage_root }}/stack/authentik/secrets/authentik_bootstrap_token
  register: authentik_bootstrap_token
  become: true

- set_fact: authentik_base_url="{{ recipes.authentik.api_base_url }}"
- set_fact: authentik_token="{{ authentik_bootstrap_token.stdout }}"
- set_fact: auth_app_settings="{{ recipes[auth_recipe].auth_app_settings }}"

- name: "{{ auth_recipe }} --> Get App from Authentik"
  uri:
    url: "{{ authentik_base_url }}/core/applications/{{ auth_app_settings.app_slug }}/"
    method: GET
    status_code:
      - 200
      - 404
    headers:
      Accept: application/json
      Authorization: 'Bearer {{ authentik_token }}'
    validate_certs: false
  register: _result_application_get

- name: "{{ auth_recipe }} --> Create App in Authentik"
  when: _result_application_get.status == 404
  uri:
    url: "{{ authentik_base_url }}/core/applications/"
    method: POST
    body_format: json
    body: |
      {
        "name": "{{ auth_app_settings.app_name }}",
        "slug": "{{ auth_app_settings.app_slug }}",
      }
    status_code:
      - 201
    headers:
      Accept: application/json
      Authorization: 'Bearer {{ authentik_token }}'
    validate_certs: false
  register: _result_application_post

- set_fact: auth_app="{{ _result_application_get if (_result_application_get.status == 200) else _result_application_post }}"

- name: Download app icon from selfh.st
  ansible.builtin.get_url:
    url: "https://cdn.jsdelivr.net/gh/selfhst/icons/png/{{ auth_app_settings.app_icon }}"
    dest: "{{ distributed_storage_root }}/appdata/authentik/media/public/icons/{{ auth_app_settings.app_icon }}"

- name: "Set app icon in Authentik"
  uri:
    url: "{{ authentik_base_url }}/core/applications/{{ auth_app_settings.app_slug }}/set_icon_url/"
    method: POST
    body_format: json
    body: |
      {
        "url": "{{ recipes.authentik.domain }}/media/public/icons/{{ auth_app_settings.app_icon }}"
      }
    status_code:
      - 200
    headers:
      Accept: application/json
      Authorization: 'Bearer {{ authentik_token }}'
    validate_certs: false
  register: _result_application_get

- name: "Create Provider in Authentik"
  when: auth_app.json.provider == None
  block:
  #default-provider-authorization-explicit-consent
  - name: "{{ auth_recipe }} --> Provider --> Get Auth Flow"
    uri:
      url: "{{ authentik_base_url }}/flows/instances/default-provider-authorization-explicit-consent/"
      method: GET
      status_code:
        - 200
      headers:
        Accept: application/json
        Authorization: 'Bearer {{ authentik_token }}'
      validate_certs: false
    register: _result_provider_flow_auth

  #default-provider-invalidation-flow
  - name: "{{ auth_recipe }} --> Provider --> Get Invalidation Flow"
    uri:
      url: "{{ authentik_base_url }}/flows/instances/default-provider-invalidation-flow/"
      method: GET
      status_code:
        - 200
      headers:
        Accept: application/json
        Authorization: 'Bearer {{ authentik_token }}'
      validate_certs: false
    register: _result_provider_flow_invalidation

  - name: "{{ auth_recipe }} --> Provider--> Create Provider in Authentik"
    uri:
      url: "{{ authentik_base_url }}/providers/proxy/"
      method: POST
      body_format: json
      body: |
        {
          "name": "{{ auth_app_settings.app_name }} Provider",
          "authorization_flow": "{{ _result_provider_flow_auth.json.pk }}",
          "invalidation_flow": "{{ _result_provider_flow_invalidation.json.pk }}",
          "external_host": "https://{{ auth_app_settings.domain }}",
          "mode": "forward_single",
          "access_token_validity": "hours=24",
          "refresh_token_validity": "days=30",
        }
      status_code:
        - 201
      headers:
        Accept: application/json
        Authorization: 'Bearer {{ authentik_token }}'
      validate_certs: false
    register: _result_provider_create

  - name: "{{ auth_recipe }} --> Provider --> Associate Provider to App in Authentik"
    uri:
      url: "{{ authentik_base_url }}/core/applications/{{ auth_app_settings.app_slug }}/"
      method: PATCH
      body_format: json
      body: |
        {
          "provider": {{ _result_provider_create.json.pk }}
        }
      status_code:
        - 200
      headers:
        Accept: application/json
        Authorization: 'Bearer {{ authentik_token }}'
      validate_certs: false
    register: _result_application_post

- name: "{{ auth_recipe }} --> Get App from Authentik"
  uri:
    url: "{{ authentik_base_url }}/core/applications/{{ auth_app_settings.app_slug }}/"
    method: GET
    status_code:
      - 200
      - 404
    headers:
      Accept: application/json
      Authorization: 'Bearer {{ authentik_token }}'
    validate_certs: false
  register: _result_application_get

- set_fact: auth_app="{{ _result_application_get }}"

- name: "{{ auth_recipe }} --> Outposts --> Get Outpost from Authentik"
  uri:
    url: "{{ authentik_base_url }}/outposts/instances/?providers_by_pk={{ auth_app.json.provider }}"
    method: GET
    status_code:
      - 200
    headers:
      Accept: application/json
      Authorization: 'Bearer {{ authentik_token }}'
    validate_certs: false
  register: _result_outposts_get

- set_fact: outpost_count="{{ _result_outposts_get.json.pagination.count }}"

- name: Display auth_recipe
  ansible.builtin.debug:
    var: outpost_count

- name: "{{ auth_recipe }} --> Outposts --> Add provider to outpost"
  when: outpost_count == "0"
  block:
    - name: "{{ auth_recipe }} --> Outposts --> Get Default Docker Outpost from Authentik"
      uri:
        url: "{{ authentik_base_url }}/outposts/instances/?service_connection__name__iexact=Local%20Docker%20connection"
        method: GET
        status_code:
          - 200
        headers:
          Accept: application/json
          Authorization: 'Bearer {{ authentik_token }}'
        validate_certs: false
      register: _result_outposts_get

    - set_fact: docker_outpost="{{ _result_outposts_get.json.results[0] }}"
    - set_fact: outpost_providers="{{ docker_outpost.providers + [auth_app.json.provider] }}"

    - name: "{{ auth_recipe }} --> Outposts--> Update outpost with provider IDs"
      uri:
        url: "{{ authentik_base_url }}/outposts/instances/{{ docker_outpost.pk }}/"
        method: PATCH
        body_format: json
        body: |
          {
            "providers": [{{ outpost_providers | join(', ')  }}]
          }
        status_code:
          - 200
        headers:
          Accept: application/json
          Authorization: 'Bearer {{ authentik_token }}'
        validate_certs: false
      register: _result_provider_create


# @TODO Remove
- name: Display auth_recipe
  ansible.builtin.debug:
    var: _result_outposts_get