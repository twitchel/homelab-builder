- name: Display all variables/facts known for a host
  ansible.builtin.debug:
    var: recipes
    verbosity: 0

- name: Display all variables/facts known for a host
  ansible.builtin.debug:
    var: dns_domain
    verbosity: 0

- name: "{{ requested_recipe }} --> ensure /var/data/stack/{{ requested_recipe }} exists"
  file:
    path: "/var/data/stack/{{ requested_recipe }}"
    state: directory

- name: "{{ requested_recipe }} --> ensure /var/data/appdata/{{ requested_recipe }} exists"
  file:
    path: "/var/data/appdata/{{ requested_recipe }}"
    state: directory

- name: "{{ requested_recipe }} --> copy docker-compose template file"
  template:
    force: true
    src: ../recipes/{{ requested_recipe }}/stack/docker-compose.yml.j2
    dest: /var/data/stack/{{ requested_recipe }}/docker-compose.yml

- name: "{{ requested_recipe }} --> copy env file"
  copy:
    force: true
    src: ../recipes/{{ requested_recipe }}/stack/service.env
    dest: /var/data/stack/{{ requested_recipe }}/.env

- name: "{{ requested_recipe }} -> set global env vars for this recipe"
  lineinfile:
    path: "/var/data/stack/{{ requested_recipe }}/.env"
    regexp: '^{{ item.key }}='
    line: '{{ item.key }}={{ item.value}}'
  with_items: "{{ common_env | dict2items }}"
  when:
    - common_env is defined

- name: "{{ requested_recipe }} -> set env vars for this recipe"
  lineinfile:
    path: "/var/data/stack/{{ requested_recipe }}/.env"
    regexp: '^{{ item.key }}='
    line: '{{ item.key }}={{ item.value}}'
  with_items: "{{ recipes[requested_recipe].env | dict2items }}"
  when:
    - recipes[requested_recipe].env is defined
  no_log: true